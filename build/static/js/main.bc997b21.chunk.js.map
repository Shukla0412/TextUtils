{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","to","title","onClick","togglemode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","disabled","length","newtext","toUpperCase","showAlert","toLowerCase","newText","split","join","document","getElementById","select","navigator","clipboard","writeText","filter","element","Alert","height","alert","role","word","lower","charAt","slice","capitalise","msg","App","setmode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bc997b21.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function About(props) {\r\n\r\n    let myStyle = {\r\n        color: props.mode ==='dark'?'white':'#042743',\r\n        backgroundColor: props.mode ==='dark'?'rgb(36 74 104)':'white', \r\n    }\r\n    \r\n    \r\n\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // })\r\n    // const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n    // const toggleStyle = ()=>{\r\n    //     if(myStyle.color === 'black'){\r\n    //         setMyStyle({ \r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px solid white'\r\n                \r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({ \r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         setBtnText(\"Enable Dark Mode\");\r\n    //  style={myStyle}   }\r\n    //}\r\n    \r\n    return (\r\n            <div className=\"container\">\r\n                <h1 className=\"my-3\" style={{color: props.mode ==='dark'?'white':'#042743'}}>About Us</h1>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                          \r\n                        <strong>Analyze Your text </strong>\r\n                        </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                           \r\n                        Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or \r\n    \r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                   \r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            \r\n                        <strong>Free to use </strong>\r\n                        </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            \r\n                        <strong>Browser Compatible </strong>\r\n                        </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            \r\n    \r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n               \r\n    \r\n            </div>\r\n        )\r\n    \r\n    \r\n    }","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) \r\n{\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      {/**Using template literal so that we can use js in b/w  using backticks*/} \r\n    <div className=\"container-fluid\" >\r\n      <Link className=\"navbar-brand\" to=\"#\">{props.title}</Link>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">About</Link>{/**we are using Link and to for routing */}\r\n           </li>\r\n          \r\n        </ul>\r\n        {/*<form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form>*/}\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\nNavbar.propTypes={\r\n    title:PropTypes.string.isRequired,\r\n    aboutext:PropTypes.string\r\n};//First import proptypes from impt,it s used to check the types of props entered.is required used to tell that value of this prop is needed\r\n// Navbar.defaultprops={\r\n//     title:'Set Title'\r\n// };//if we forget to give prop then default goes there","import React , {useState} from 'react'\r\n//Importing usedstate hook from react\r\n// const [text, setText] = useState('Enter Text here');\r\n//text is the var having default value text here.\r\nexport default function TextForm(props) {\r\n      const handleUpclick=()=>{\r\n      let newtext=text.toUpperCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Converted to upper case\",\"success\");\r\n        \r\n      }\r\n      const handleLoclick=()=>{\r\n        let newtext=text.toLowerCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Converted to Lower case\",\"success\");\r\n      }\r\n      const Textclear=()=>{\r\n        let newtext=' ';\r\n        setText(newtext);\r\n      }\r\n      const emailExtracter=(text)=>{let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n      let wordd=text.split(\" \");\r\n      if (wordd.match(regexEmail)) {\r\n        let mail=wordd;\r\n        let newtext=mail;\r\n        setText(newtext);}\r\n      }\r\n      const capitalise=()=>{\r\n        let firstchar=text.charAt[0];\r\n        console.log(firstchar);\r\n        let newtext=firstchar.toUpperCase();\r\n        setText(newtext+text.slice(1).toLowerCase());\r\n        document.title='Textutils-Darkmode';//to change title dynamically\r\n        }\r\n   \r\n   \r\n   const handlecopy=()=>{\r\n    var text=document.getElementById(\"mybox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text copied\",\"success\");\r\n   }\r\n   const Removetrapace =()=>{\r\n    let newText=text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n\r\n   }\r\n   \r\n  const handleOnchange=(event)=>{//onchange is a event listener ki text area m kch daale to vo settext m aajae lekin jo setext m h vo\r\n    setText(event.target.value); //rhega hi without onchange we can not edit textarea\r\n   }\r\n  const [text, setText] = useState('Enter Text here');//Now we cannot change text like normal we have to use\r\n  //setText function    text=\"okk\"; is wrong\r\n  //setText(\"okk\");  correct\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n          <div className=\"mb-3\">\r\n            <h1>{props.heading }\r\n              </h1>\r\n            <label htmlFor=\"mybox\" className=\"form-label\"></label>\r\n            <textarea className=\"form-control\" value=  {text} onChange={handleOnchange}  style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}}  id=\"mybox\" rows=\"8\"></textarea>\r\n          </div>\r\n          <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpclick}>Convert to Uppercase</button>\r\n          <button  disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoclick}>Convert to lowercase</button>\r\n          <button  disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={Textclear}>Clear text</button>\r\n          <button  disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={Removetrapace}>Remove Extra Spaces</button>\r\n          <button  disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handlecopy}>Copy Text</button>\r\n         \r\n    </div>\r\n    <div className=\"container my-4\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n      <h1>   Your text summary   </h1>\r\n      <p>   {text.split(\" \").filter((element)=>{return element.length!==0}).length} Words and {text.length} charcters   </p>\r\n      <p>    Time taken in minutes to read is {0.008*text.split(\" \").filter((element)=>{return element.length!==0}).length} minutes.    </p>\r\n      <h2>    Preview    </h2>\r\n      <p>  {text.length>0?text:\"Ënter Your text above to preview\"}   </p>\r\n    </div>\r\n    </>\r\n  )\r\n  }\r\n  ","import React from 'react'\r\n\r\nexport default  function Alert(props) {\r\n    const capitalise=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n      <div style={{height:'50px'}}>\r\n      { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n         <strong>{capitalise(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div> }\r\n        </div>\r\n  )\r\n}\r\n\r\n\r\n","import './App.css';\nimport { useState } from 'react';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\nimport React from \"react\";\n import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode]=useState('light');//whether dark mode is enabled or not\n  const [alert,setAlert]=useState(null);\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n\n    });\n        setTimeout(() => {\n          setAlert(null);\n      }, 1500);//so that vo khud chla jae coz once we dismiss alert it don't come again until refreshed\n\n  }\n  //type used for type of alert in bootstrap\n  const togglemode = ()=>{\n    if(mode === 'light'){\n      setmode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode enabled\",\"success\");\n      document.title='Textutils-Darkmode';//to change title dynamically\n    }\n    else{\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode enabled\",\"success\");\n      document.title='Textutils-Lightmode';\n    }\n  }\n  return (\n    <>\n    <Router>\n   {/** <Navbar title=\"TextUtils\" aboutext=\"About Us\" mode={mode}/>whether navbar will be dark or light initially */} \n   {/**pack switch inside <Router>*/} \n   <Navbar title=\"TextUtils\" mode={mode} togglemode={togglemode}/>\n   <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    <Switch>\n    {/* /users --> Component 1\n        /users/home --> Component 2 */}\n          <Route exact path=\"/about\">\n            <About mode={mode} />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm showAlert={showAlert} heading=\"Try TextUtils - word counter, character counter, remove extra spaces\" mode={mode}/>\n          </Route>\n    </Switch>\n    \n    {/* <TextForm showAlert={showAlert} heading=\"Enter the Text to Analyse\" mode={mode} /> */}\n    </div>\n    \n     {/**passing alert to textform to tell that whenevre u wan to show alert jst call this function*/}\n    {/**<About mode={mode}/>*/} \n   \n    </Router>\n    </>\n    \n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}